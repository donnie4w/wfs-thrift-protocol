{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module IWfs where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Wfs_Types
import qualified IWfs_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data WfsPost_args = WfsPost_args  { wfsPost_args_wf :: WfsFile
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsPost_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsPost_args_wf record  
instance QC.Arbitrary WfsPost_args where 
  arbitrary = M.liftM WfsPost_args (QC.arbitrary)
  shrink obj | obj == default_WfsPost_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsPost_args{wfsPost_args_wf = wfsPost_args_wf obj} then P.Nothing else P.Just $ default_WfsPost_args{wfsPost_args_wf = wfsPost_args_wf obj}
    ]
from_WfsPost_args :: WfsPost_args -> T.ThriftVal
from_WfsPost_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v22 -> P.Just (1, ("wf",from_WfsFile _v22))) $ wfsPost_args_wf record
  ]
write_WfsPost_args :: (T.Protocol p, T.Transport t) => p t -> WfsPost_args -> P.IO ()
write_WfsPost_args oprot record = T.writeVal oprot $ from_WfsPost_args record
encode_WfsPost_args :: (T.Protocol p, T.Transport t) => p t -> WfsPost_args -> LBS.ByteString
encode_WfsPost_args oprot record = T.serializeVal oprot $ from_WfsPost_args record
to_WfsPost_args :: T.ThriftVal -> WfsPost_args
to_WfsPost_args (T.TStruct fields) = WfsPost_args{
  wfsPost_args_wf = P.maybe (wfsPost_args_wf default_WfsPost_args) (\(_,_val24) -> (case _val24 of {T.TStruct _val25 -> (to_WfsFile (T.TStruct _val25)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_WfsPost_args _ = P.error "not a struct"
read_WfsPost_args :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsPost_args
read_WfsPost_args iprot = to_WfsPost_args <$> T.readVal iprot (T.T_STRUCT typemap_WfsPost_args)
decode_WfsPost_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsPost_args
decode_WfsPost_args iprot bs = to_WfsPost_args $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsPost_args) bs
typemap_WfsPost_args :: T.TypeMap
typemap_WfsPost_args = Map.fromList [(1,("wf",(T.T_STRUCT typemap_WfsFile)))]
default_WfsPost_args :: WfsPost_args
default_WfsPost_args = WfsPost_args{
  wfsPost_args_wf = default_WfsFile}
data WfsPost_result = WfsPost_result  { wfsPost_result_success :: WfsAck
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsPost_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsPost_result_success record  
instance QC.Arbitrary WfsPost_result where 
  arbitrary = M.liftM WfsPost_result (QC.arbitrary)
  shrink obj | obj == default_WfsPost_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsPost_result{wfsPost_result_success = wfsPost_result_success obj} then P.Nothing else P.Just $ default_WfsPost_result{wfsPost_result_success = wfsPost_result_success obj}
    ]
from_WfsPost_result :: WfsPost_result -> T.ThriftVal
from_WfsPost_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v28 -> P.Just (0, ("success",from_WfsAck _v28))) $ wfsPost_result_success record
  ]
write_WfsPost_result :: (T.Protocol p, T.Transport t) => p t -> WfsPost_result -> P.IO ()
write_WfsPost_result oprot record = T.writeVal oprot $ from_WfsPost_result record
encode_WfsPost_result :: (T.Protocol p, T.Transport t) => p t -> WfsPost_result -> LBS.ByteString
encode_WfsPost_result oprot record = T.serializeVal oprot $ from_WfsPost_result record
to_WfsPost_result :: T.ThriftVal -> WfsPost_result
to_WfsPost_result (T.TStruct fields) = WfsPost_result{
  wfsPost_result_success = P.maybe (wfsPost_result_success default_WfsPost_result) (\(_,_val30) -> (case _val30 of {T.TStruct _val31 -> (to_WfsAck (T.TStruct _val31)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_WfsPost_result _ = P.error "not a struct"
read_WfsPost_result :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsPost_result
read_WfsPost_result iprot = to_WfsPost_result <$> T.readVal iprot (T.T_STRUCT typemap_WfsPost_result)
decode_WfsPost_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsPost_result
decode_WfsPost_result iprot bs = to_WfsPost_result $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsPost_result) bs
typemap_WfsPost_result :: T.TypeMap
typemap_WfsPost_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_WfsAck)))]
default_WfsPost_result :: WfsPost_result
default_WfsPost_result = WfsPost_result{
  wfsPost_result_success = default_WfsAck}
data WfsRead_args = WfsRead_args  { wfsRead_args_name :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsRead_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsRead_args_name record  
instance QC.Arbitrary WfsRead_args where 
  arbitrary = M.liftM WfsRead_args (QC.arbitrary)
  shrink obj | obj == default_WfsRead_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsRead_args{wfsRead_args_name = wfsRead_args_name obj} then P.Nothing else P.Just $ default_WfsRead_args{wfsRead_args_name = wfsRead_args_name obj}
    ]
from_WfsRead_args :: WfsRead_args -> T.ThriftVal
from_WfsRead_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v34 -> P.Just (1, ("name",T.TString $ E.encodeUtf8 _v34))) $ wfsRead_args_name record
  ]
write_WfsRead_args :: (T.Protocol p, T.Transport t) => p t -> WfsRead_args -> P.IO ()
write_WfsRead_args oprot record = T.writeVal oprot $ from_WfsRead_args record
encode_WfsRead_args :: (T.Protocol p, T.Transport t) => p t -> WfsRead_args -> LBS.ByteString
encode_WfsRead_args oprot record = T.serializeVal oprot $ from_WfsRead_args record
to_WfsRead_args :: T.ThriftVal -> WfsRead_args
to_WfsRead_args (T.TStruct fields) = WfsRead_args{
  wfsRead_args_name = P.maybe (wfsRead_args_name default_WfsRead_args) (\(_,_val36) -> (case _val36 of {T.TString _val37 -> E.decodeUtf8 _val37; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_WfsRead_args _ = P.error "not a struct"
read_WfsRead_args :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsRead_args
read_WfsRead_args iprot = to_WfsRead_args <$> T.readVal iprot (T.T_STRUCT typemap_WfsRead_args)
decode_WfsRead_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsRead_args
decode_WfsRead_args iprot bs = to_WfsRead_args $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsRead_args) bs
typemap_WfsRead_args :: T.TypeMap
typemap_WfsRead_args = Map.fromList [(1,("name",T.T_STRING))]
default_WfsRead_args :: WfsRead_args
default_WfsRead_args = WfsRead_args{
  wfsRead_args_name = ""}
data WfsRead_result = WfsRead_result  { wfsRead_result_success :: WfsFile
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsRead_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsRead_result_success record  
instance QC.Arbitrary WfsRead_result where 
  arbitrary = M.liftM WfsRead_result (QC.arbitrary)
  shrink obj | obj == default_WfsRead_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsRead_result{wfsRead_result_success = wfsRead_result_success obj} then P.Nothing else P.Just $ default_WfsRead_result{wfsRead_result_success = wfsRead_result_success obj}
    ]
from_WfsRead_result :: WfsRead_result -> T.ThriftVal
from_WfsRead_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v40 -> P.Just (0, ("success",from_WfsFile _v40))) $ wfsRead_result_success record
  ]
write_WfsRead_result :: (T.Protocol p, T.Transport t) => p t -> WfsRead_result -> P.IO ()
write_WfsRead_result oprot record = T.writeVal oprot $ from_WfsRead_result record
encode_WfsRead_result :: (T.Protocol p, T.Transport t) => p t -> WfsRead_result -> LBS.ByteString
encode_WfsRead_result oprot record = T.serializeVal oprot $ from_WfsRead_result record
to_WfsRead_result :: T.ThriftVal -> WfsRead_result
to_WfsRead_result (T.TStruct fields) = WfsRead_result{
  wfsRead_result_success = P.maybe (wfsRead_result_success default_WfsRead_result) (\(_,_val42) -> (case _val42 of {T.TStruct _val43 -> (to_WfsFile (T.TStruct _val43)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_WfsRead_result _ = P.error "not a struct"
read_WfsRead_result :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsRead_result
read_WfsRead_result iprot = to_WfsRead_result <$> T.readVal iprot (T.T_STRUCT typemap_WfsRead_result)
decode_WfsRead_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsRead_result
decode_WfsRead_result iprot bs = to_WfsRead_result $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsRead_result) bs
typemap_WfsRead_result :: T.TypeMap
typemap_WfsRead_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_WfsFile)))]
default_WfsRead_result :: WfsRead_result
default_WfsRead_result = WfsRead_result{
  wfsRead_result_success = default_WfsFile}
data WfsDel_args = WfsDel_args  { wfsDel_args_name :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsDel_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsDel_args_name record  
instance QC.Arbitrary WfsDel_args where 
  arbitrary = M.liftM WfsDel_args (QC.arbitrary)
  shrink obj | obj == default_WfsDel_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsDel_args{wfsDel_args_name = wfsDel_args_name obj} then P.Nothing else P.Just $ default_WfsDel_args{wfsDel_args_name = wfsDel_args_name obj}
    ]
from_WfsDel_args :: WfsDel_args -> T.ThriftVal
from_WfsDel_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v46 -> P.Just (1, ("name",T.TString $ E.encodeUtf8 _v46))) $ wfsDel_args_name record
  ]
write_WfsDel_args :: (T.Protocol p, T.Transport t) => p t -> WfsDel_args -> P.IO ()
write_WfsDel_args oprot record = T.writeVal oprot $ from_WfsDel_args record
encode_WfsDel_args :: (T.Protocol p, T.Transport t) => p t -> WfsDel_args -> LBS.ByteString
encode_WfsDel_args oprot record = T.serializeVal oprot $ from_WfsDel_args record
to_WfsDel_args :: T.ThriftVal -> WfsDel_args
to_WfsDel_args (T.TStruct fields) = WfsDel_args{
  wfsDel_args_name = P.maybe (wfsDel_args_name default_WfsDel_args) (\(_,_val48) -> (case _val48 of {T.TString _val49 -> E.decodeUtf8 _val49; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_WfsDel_args _ = P.error "not a struct"
read_WfsDel_args :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsDel_args
read_WfsDel_args iprot = to_WfsDel_args <$> T.readVal iprot (T.T_STRUCT typemap_WfsDel_args)
decode_WfsDel_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsDel_args
decode_WfsDel_args iprot bs = to_WfsDel_args $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsDel_args) bs
typemap_WfsDel_args :: T.TypeMap
typemap_WfsDel_args = Map.fromList [(1,("name",T.T_STRING))]
default_WfsDel_args :: WfsDel_args
default_WfsDel_args = WfsDel_args{
  wfsDel_args_name = ""}
data WfsDel_result = WfsDel_result  { wfsDel_result_success :: WfsAck
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable WfsDel_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` wfsDel_result_success record  
instance QC.Arbitrary WfsDel_result where 
  arbitrary = M.liftM WfsDel_result (QC.arbitrary)
  shrink obj | obj == default_WfsDel_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_WfsDel_result{wfsDel_result_success = wfsDel_result_success obj} then P.Nothing else P.Just $ default_WfsDel_result{wfsDel_result_success = wfsDel_result_success obj}
    ]
from_WfsDel_result :: WfsDel_result -> T.ThriftVal
from_WfsDel_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v52 -> P.Just (0, ("success",from_WfsAck _v52))) $ wfsDel_result_success record
  ]
write_WfsDel_result :: (T.Protocol p, T.Transport t) => p t -> WfsDel_result -> P.IO ()
write_WfsDel_result oprot record = T.writeVal oprot $ from_WfsDel_result record
encode_WfsDel_result :: (T.Protocol p, T.Transport t) => p t -> WfsDel_result -> LBS.ByteString
encode_WfsDel_result oprot record = T.serializeVal oprot $ from_WfsDel_result record
to_WfsDel_result :: T.ThriftVal -> WfsDel_result
to_WfsDel_result (T.TStruct fields) = WfsDel_result{
  wfsDel_result_success = P.maybe (wfsDel_result_success default_WfsDel_result) (\(_,_val54) -> (case _val54 of {T.TStruct _val55 -> (to_WfsAck (T.TStruct _val55)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_WfsDel_result _ = P.error "not a struct"
read_WfsDel_result :: (T.Transport t, T.Protocol p) => p t -> P.IO WfsDel_result
read_WfsDel_result iprot = to_WfsDel_result <$> T.readVal iprot (T.T_STRUCT typemap_WfsDel_result)
decode_WfsDel_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> WfsDel_result
decode_WfsDel_result iprot bs = to_WfsDel_result $ T.deserializeVal iprot (T.T_STRUCT typemap_WfsDel_result) bs
typemap_WfsDel_result :: T.TypeMap
typemap_WfsDel_result = Map.fromList [(0,("success",(T.T_STRUCT typemap_WfsAck)))]
default_WfsDel_result :: WfsDel_result
default_WfsDel_result = WfsDel_result{
  wfsDel_result_success = default_WfsAck}
process_wfsPost (seqid, iprot, oprot, handler) = do
  args <- read_WfsPost_args iprot
  (X.catch
    (do
      val <- Iface.wfsPost handler (wfsPost_args_wf args)
      let res = default_WfsPost_result{wfsPost_result_success = val}
      T.writeMessageBegin oprot ("wfsPost", T.M_REPLY, seqid)
      write_WfsPost_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("wfsPost", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_wfsRead (seqid, iprot, oprot, handler) = do
  args <- read_WfsRead_args iprot
  (X.catch
    (do
      val <- Iface.wfsRead handler (wfsRead_args_name args)
      let res = default_WfsRead_result{wfsRead_result_success = val}
      T.writeMessageBegin oprot ("wfsRead", T.M_REPLY, seqid)
      write_WfsRead_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("wfsRead", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_wfsDel (seqid, iprot, oprot, handler) = do
  args <- read_WfsDel_args iprot
  (X.catch
    (do
      val <- Iface.wfsDel handler (wfsDel_args_name args)
      let res = default_WfsDel_result{wfsDel_result_success = val}
      T.writeMessageBegin oprot ("wfsDel", T.M_REPLY, seqid)
      write_WfsDel_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("wfsDel", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "wfsPost" -> process_wfsPost (seqid,iprot,oprot,handler)
  "wfsRead" -> process_wfsRead (seqid,iprot,oprot,handler)
  "wfsDel" -> process_wfsDel (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
