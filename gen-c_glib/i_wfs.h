/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef I_WFS_H
#define I_WFS_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "wfs_types.h"

/* IWfs service interface */
typedef struct _IWfsIf IWfsIf;  /* dummy object */

struct _IWfsIfInterface
{
  GTypeInterface parent;

  gboolean (*wfs_post) (IWfsIf *iface, WfsAck ** _return, const WfsFile * wf, GError **error);
  gboolean (*wfs_read) (IWfsIf *iface, WfsFile ** _return, const gchar * name, GError **error);
  gboolean (*wfs_del) (IWfsIf *iface, WfsAck ** _return, const gchar * name, GError **error);
};
typedef struct _IWfsIfInterface IWfsIfInterface;

GType i_wfs_if_get_type (void);
#define TYPE_I_WFS_IF (i_wfs_if_get_type())
#define I_WFS_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_WFS_IF, IWfsIf))
#define IS_I_WFS_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_WFS_IF))
#define I_WFS_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_I_WFS_IF, IWfsIfInterface))

gboolean i_wfs_if_wfs_post (IWfsIf *iface, WfsAck ** _return, const WfsFile * wf, GError **error);
gboolean i_wfs_if_wfs_read (IWfsIf *iface, WfsFile ** _return, const gchar * name, GError **error);
gboolean i_wfs_if_wfs_del (IWfsIf *iface, WfsAck ** _return, const gchar * name, GError **error);

/* IWfs service client */
struct _IWfsClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _IWfsClient IWfsClient;

struct _IWfsClientClass
{
  GObjectClass parent;
};
typedef struct _IWfsClientClass IWfsClientClass;

GType i_wfs_client_get_type (void);
#define TYPE_I_WFS_CLIENT (i_wfs_client_get_type())
#define I_WFS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_WFS_CLIENT, IWfsClient))
#define I_WFS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_WFS_CLIENT, IWfsClientClass))
#define I_WFS_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_WFS_CLIENT))
#define I_WFS_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_WFS_CLIENT))
#define I_WFS_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_WFS_CLIENT, IWfsClientClass))

gboolean i_wfs_client_wfs_post (IWfsIf * iface, WfsAck ** _return, const WfsFile * wf, GError ** error);
gboolean i_wfs_client_send_wfs_post (IWfsIf * iface, const WfsFile * wf, GError ** error);
gboolean i_wfs_client_recv_wfs_post (IWfsIf * iface, WfsAck ** _return, GError ** error);
gboolean i_wfs_client_wfs_read (IWfsIf * iface, WfsFile ** _return, const gchar * name, GError ** error);
gboolean i_wfs_client_send_wfs_read (IWfsIf * iface, const gchar * name, GError ** error);
gboolean i_wfs_client_recv_wfs_read (IWfsIf * iface, WfsFile ** _return, GError ** error);
gboolean i_wfs_client_wfs_del (IWfsIf * iface, WfsAck ** _return, const gchar * name, GError ** error);
gboolean i_wfs_client_send_wfs_del (IWfsIf * iface, const gchar * name, GError ** error);
gboolean i_wfs_client_recv_wfs_del (IWfsIf * iface, WfsAck ** _return, GError ** error);
void i_wfs_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void i_wfs_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* IWfs handler (abstract base class) */
struct _IWfsHandler
{
  GObject parent;
};
typedef struct _IWfsHandler IWfsHandler;

struct _IWfsHandlerClass
{
  GObjectClass parent;

  gboolean (*wfs_post) (IWfsIf *iface, WfsAck ** _return, const WfsFile * wf, GError **error);
  gboolean (*wfs_read) (IWfsIf *iface, WfsFile ** _return, const gchar * name, GError **error);
  gboolean (*wfs_del) (IWfsIf *iface, WfsAck ** _return, const gchar * name, GError **error);
};
typedef struct _IWfsHandlerClass IWfsHandlerClass;

GType i_wfs_handler_get_type (void);
#define TYPE_I_WFS_HANDLER (i_wfs_handler_get_type())
#define I_WFS_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_WFS_HANDLER, IWfsHandler))
#define IS_I_WFS_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_WFS_HANDLER))
#define I_WFS_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_WFS_HANDLER, IWfsHandlerClass))
#define IS_I_WFS_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_WFS_HANDLER))
#define I_WFS_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_WFS_HANDLER, IWfsHandlerClass))

gboolean i_wfs_handler_wfs_post (IWfsIf *iface, WfsAck ** _return, const WfsFile * wf, GError **error);
gboolean i_wfs_handler_wfs_read (IWfsIf *iface, WfsFile ** _return, const gchar * name, GError **error);
gboolean i_wfs_handler_wfs_del (IWfsIf *iface, WfsAck ** _return, const gchar * name, GError **error);

/* IWfs processor */
struct _IWfsProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  IWfsHandler *handler;
  GHashTable *process_map;
};
typedef struct _IWfsProcessor IWfsProcessor;

struct _IWfsProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _IWfsProcessorClass IWfsProcessorClass;

GType i_wfs_processor_get_type (void);
#define TYPE_I_WFS_PROCESSOR (i_wfs_processor_get_type())
#define I_WFS_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_WFS_PROCESSOR, IWfsProcessor))
#define IS_I_WFS_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_WFS_PROCESSOR))
#define I_WFS_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_WFS_PROCESSOR, IWfsProcessorClass))
#define IS_I_WFS_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_WFS_PROCESSOR))
#define I_WFS_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_WFS_PROCESSOR, IWfsProcessorClass))

#endif /* I_WFS_H */
