/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef WFS_IFACE_H
#define WFS_IFACE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "stub_types.h"

/* WfsIface service interface */
typedef struct _WfsIfaceIf WfsIfaceIf;  /* dummy object */

struct _WfsIfaceIfInterface
{
  GTypeInterface parent;

  gboolean (*append) (WfsIfaceIf *iface, WfsAck ** _return, const WfsFile * file, GError **error);
  gboolean (*delete) (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, GError **error);
  gboolean (*rename) (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, const gchar * newpath, GError **error);
  gboolean (*auth) (WfsIfaceIf *iface, WfsAck ** _return, const WfsAuth * wa, GError **error);
  gboolean (*get) (WfsIfaceIf *iface, WfsData ** _return, const gchar * path, GError **error);
  gboolean (*ping) (WfsIfaceIf *iface, gint8* _return, GError **error);
};
typedef struct _WfsIfaceIfInterface WfsIfaceIfInterface;

GType wfs_iface_if_get_type (void);
#define TYPE_WFS_IFACE_IF (wfs_iface_if_get_type())
#define WFS_IFACE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WFS_IFACE_IF, WfsIfaceIf))
#define IS_WFS_IFACE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WFS_IFACE_IF))
#define WFS_IFACE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_WFS_IFACE_IF, WfsIfaceIfInterface))

gboolean wfs_iface_if_append (WfsIfaceIf *iface, WfsAck ** _return, const WfsFile * file, GError **error);
gboolean wfs_iface_if_delete (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, GError **error);
gboolean wfs_iface_if_rename (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, const gchar * newpath, GError **error);
gboolean wfs_iface_if_auth (WfsIfaceIf *iface, WfsAck ** _return, const WfsAuth * wa, GError **error);
gboolean wfs_iface_if_get (WfsIfaceIf *iface, WfsData ** _return, const gchar * path, GError **error);
gboolean wfs_iface_if_ping (WfsIfaceIf *iface, gint8* _return, GError **error);

/* WfsIface service client */
struct _WfsIfaceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _WfsIfaceClient WfsIfaceClient;

struct _WfsIfaceClientClass
{
  GObjectClass parent;
};
typedef struct _WfsIfaceClientClass WfsIfaceClientClass;

GType wfs_iface_client_get_type (void);
#define TYPE_WFS_IFACE_CLIENT (wfs_iface_client_get_type())
#define WFS_IFACE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WFS_IFACE_CLIENT, WfsIfaceClient))
#define WFS_IFACE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_WFS_IFACE_CLIENT, WfsIfaceClientClass))
#define WFS_IFACE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WFS_IFACE_CLIENT))
#define WFS_IFACE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_WFS_IFACE_CLIENT))
#define WFS_IFACE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WFS_IFACE_CLIENT, WfsIfaceClientClass))

gboolean wfs_iface_client_append (WfsIfaceIf * iface, WfsAck ** _return, const WfsFile * file, GError ** error);
gboolean wfs_iface_client_send_append (WfsIfaceIf * iface, const WfsFile * file, GError ** error);
gboolean wfs_iface_client_recv_append (WfsIfaceIf * iface, WfsAck ** _return, GError ** error);
gboolean wfs_iface_client_delete (WfsIfaceIf * iface, WfsAck ** _return, const gchar * path, GError ** error);
gboolean wfs_iface_client_send_delete (WfsIfaceIf * iface, const gchar * path, GError ** error);
gboolean wfs_iface_client_recv_delete (WfsIfaceIf * iface, WfsAck ** _return, GError ** error);
gboolean wfs_iface_client_rename (WfsIfaceIf * iface, WfsAck ** _return, const gchar * path, const gchar * newpath, GError ** error);
gboolean wfs_iface_client_send_rename (WfsIfaceIf * iface, const gchar * path, const gchar * newpath, GError ** error);
gboolean wfs_iface_client_recv_rename (WfsIfaceIf * iface, WfsAck ** _return, GError ** error);
gboolean wfs_iface_client_auth (WfsIfaceIf * iface, WfsAck ** _return, const WfsAuth * wa, GError ** error);
gboolean wfs_iface_client_send_auth (WfsIfaceIf * iface, const WfsAuth * wa, GError ** error);
gboolean wfs_iface_client_recv_auth (WfsIfaceIf * iface, WfsAck ** _return, GError ** error);
gboolean wfs_iface_client_get (WfsIfaceIf * iface, WfsData ** _return, const gchar * path, GError ** error);
gboolean wfs_iface_client_send_get (WfsIfaceIf * iface, const gchar * path, GError ** error);
gboolean wfs_iface_client_recv_get (WfsIfaceIf * iface, WfsData ** _return, GError ** error);
gboolean wfs_iface_client_ping (WfsIfaceIf * iface, gint8* _return, GError ** error);
gboolean wfs_iface_client_send_ping (WfsIfaceIf * iface, GError ** error);
gboolean wfs_iface_client_recv_ping (WfsIfaceIf * iface, gint8* _return, GError ** error);
void wfs_iface_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void wfs_iface_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* WfsIface handler (abstract base class) */
struct _WfsIfaceHandler
{
  GObject parent;
};
typedef struct _WfsIfaceHandler WfsIfaceHandler;

struct _WfsIfaceHandlerClass
{
  GObjectClass parent;

  gboolean (*append) (WfsIfaceIf *iface, WfsAck ** _return, const WfsFile * file, GError **error);
  gboolean (*delete) (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, GError **error);
  gboolean (*rename) (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, const gchar * newpath, GError **error);
  gboolean (*auth) (WfsIfaceIf *iface, WfsAck ** _return, const WfsAuth * wa, GError **error);
  gboolean (*get) (WfsIfaceIf *iface, WfsData ** _return, const gchar * path, GError **error);
  gboolean (*ping) (WfsIfaceIf *iface, gint8* _return, GError **error);
};
typedef struct _WfsIfaceHandlerClass WfsIfaceHandlerClass;

GType wfs_iface_handler_get_type (void);
#define TYPE_WFS_IFACE_HANDLER (wfs_iface_handler_get_type())
#define WFS_IFACE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WFS_IFACE_HANDLER, WfsIfaceHandler))
#define IS_WFS_IFACE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WFS_IFACE_HANDLER))
#define WFS_IFACE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_WFS_IFACE_HANDLER, WfsIfaceHandlerClass))
#define IS_WFS_IFACE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_WFS_IFACE_HANDLER))
#define WFS_IFACE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WFS_IFACE_HANDLER, WfsIfaceHandlerClass))

gboolean wfs_iface_handler_append (WfsIfaceIf *iface, WfsAck ** _return, const WfsFile * file, GError **error);
gboolean wfs_iface_handler_delete (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, GError **error);
gboolean wfs_iface_handler_rename (WfsIfaceIf *iface, WfsAck ** _return, const gchar * path, const gchar * newpath, GError **error);
gboolean wfs_iface_handler_auth (WfsIfaceIf *iface, WfsAck ** _return, const WfsAuth * wa, GError **error);
gboolean wfs_iface_handler_get (WfsIfaceIf *iface, WfsData ** _return, const gchar * path, GError **error);
gboolean wfs_iface_handler_ping (WfsIfaceIf *iface, gint8* _return, GError **error);

/* WfsIface processor */
struct _WfsIfaceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  WfsIfaceHandler *handler;
  GHashTable *process_map;
};
typedef struct _WfsIfaceProcessor WfsIfaceProcessor;

struct _WfsIfaceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _WfsIfaceProcessorClass WfsIfaceProcessorClass;

GType wfs_iface_processor_get_type (void);
#define TYPE_WFS_IFACE_PROCESSOR (wfs_iface_processor_get_type())
#define WFS_IFACE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WFS_IFACE_PROCESSOR, WfsIfaceProcessor))
#define IS_WFS_IFACE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WFS_IFACE_PROCESSOR))
#define WFS_IFACE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_WFS_IFACE_PROCESSOR, WfsIfaceProcessorClass))
#define IS_WFS_IFACE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_WFS_IFACE_PROCESSOR))
#define WFS_IFACE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WFS_IFACE_PROCESSOR, WfsIfaceProcessorClass))

#endif /* WFS_IFACE_H */
