#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'wfs_types'

module IWfs
  class Client
    include ::Thrift::Client

    def wfsPost(wf)
      send_wfsPost(wf)
      return recv_wfsPost()
    end

    def send_wfsPost(wf)
      send_message('wfsPost', WfsPost_args, :wf => wf)
    end

    def recv_wfsPost()
      result = receive_message(WfsPost_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'wfsPost failed: unknown result')
    end

    def wfsRead(name)
      send_wfsRead(name)
      return recv_wfsRead()
    end

    def send_wfsRead(name)
      send_message('wfsRead', WfsRead_args, :name => name)
    end

    def recv_wfsRead()
      result = receive_message(WfsRead_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'wfsRead failed: unknown result')
    end

    def wfsDel(name)
      send_wfsDel(name)
      return recv_wfsDel()
    end

    def send_wfsDel(name)
      send_message('wfsDel', WfsDel_args, :name => name)
    end

    def recv_wfsDel()
      result = receive_message(WfsDel_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'wfsDel failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_wfsPost(seqid, iprot, oprot)
      args = read_args(iprot, WfsPost_args)
      result = WfsPost_result.new()
      result.success = @handler.wfsPost(args.wf)
      write_result(result, oprot, 'wfsPost', seqid)
    end

    def process_wfsRead(seqid, iprot, oprot)
      args = read_args(iprot, WfsRead_args)
      result = WfsRead_result.new()
      result.success = @handler.wfsRead(args.name)
      write_result(result, oprot, 'wfsRead', seqid)
    end

    def process_wfsDel(seqid, iprot, oprot)
      args = read_args(iprot, WfsDel_args)
      result = WfsDel_result.new()
      result.success = @handler.wfsDel(args.name)
      write_result(result, oprot, 'wfsDel', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class WfsPost_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    WF = 1

    FIELDS = {
      WF => {:type => ::Thrift::Types::STRUCT, :name => 'wf', :class => ::WfsFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class WfsPost_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::WfsAck}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class WfsRead_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class WfsRead_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::WfsFile}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class WfsDel_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class WfsDel_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::WfsAck}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

