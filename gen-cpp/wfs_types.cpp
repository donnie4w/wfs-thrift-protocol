/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "wfs_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




WfsAck::~WfsAck() throw() {
}


void WfsAck::__set_status(const int32_t val) {
  this->status = val;
__isset.status = true;
}

uint32_t WfsAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsAck");

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsAck &a, WfsAck &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

WfsAck::WfsAck(const WfsAck& other0) {
  status = other0.status;
  __isset = other0.__isset;
}
WfsAck& WfsAck::operator=(const WfsAck& other1) {
  status = other1.status;
  __isset = other1.__isset;
  return *this;
}
void WfsAck::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsAck(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}


Wfs::~Wfs() throw() {
}


void Wfs::__set_status(const int32_t val) {
  this->status = val;
__isset.status = true;
}

uint32_t Wfs::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Wfs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Wfs");

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->status);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Wfs &a, Wfs &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Wfs::Wfs(const Wfs& other2) {
  status = other2.status;
  __isset = other2.__isset;
}
Wfs& Wfs::operator=(const Wfs& other3) {
  status = other3.status;
  __isset = other3.__isset;
  return *this;
}
void Wfs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Wfs(";
  out << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ")";
}


WfsFile::~WfsFile() throw() {
}


void WfsFile::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void WfsFile::__set_fileBody(const std::string& val) {
  this->fileBody = val;
__isset.fileBody = true;
}

void WfsFile::__set_fileType(const std::string& val) {
  this->fileType = val;
__isset.fileType = true;
}

uint32_t WfsFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->fileBody);
          this->__isset.fileBody = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fileType);
          this->__isset.fileType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WfsFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WfsFile");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileBody) {
    xfer += oprot->writeFieldBegin("fileBody", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->fileBody);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fileType) {
    xfer += oprot->writeFieldBegin("fileType", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->fileType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WfsFile &a, WfsFile &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.fileBody, b.fileBody);
  swap(a.fileType, b.fileType);
  swap(a.__isset, b.__isset);
}

WfsFile::WfsFile(const WfsFile& other4) {
  name = other4.name;
  fileBody = other4.fileBody;
  fileType = other4.fileType;
  __isset = other4.__isset;
}
WfsFile& WfsFile::operator=(const WfsFile& other5) {
  name = other5.name;
  fileBody = other5.fileBody;
  fileType = other5.fileType;
  __isset = other5.__isset;
  return *this;
}
void WfsFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WfsFile(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "fileBody="; (__isset.fileBody ? (out << to_string(fileBody)) : (out << "<null>"));
  out << ", " << "fileType="; (__isset.fileType ? (out << to_string(fileType)) : (out << "<null>"));
  out << ")";
}


