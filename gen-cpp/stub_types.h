/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stub_TYPES_H
#define stub_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class WfsError;

class WfsAck;

class WfsReq;

class WfsAuth;

class WfsData;

class WfsFile;

typedef struct _WfsError__isset {
  _WfsError__isset() : code(false), info(false) {}
  bool code :1;
  bool info :1;
} _WfsError__isset;

class WfsError : public virtual ::apache::thrift::TBase {
 public:

  WfsError(const WfsError&);
  WfsError& operator=(const WfsError&);
  WfsError() noexcept;

  virtual ~WfsError() noexcept;
  int32_t code;
  std::string info;

  _WfsError__isset __isset;

  void __set_code(const int32_t val);

  void __set_info(const std::string& val);

  bool operator == (const WfsError & rhs) const;
  bool operator != (const WfsError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsError &a, WfsError &b);

std::ostream& operator<<(std::ostream& out, const WfsError& obj);

typedef struct _WfsAck__isset {
  _WfsAck__isset() : error(false) {}
  bool error :1;
} _WfsAck__isset;

class WfsAck : public virtual ::apache::thrift::TBase {
 public:

  WfsAck(const WfsAck&);
  WfsAck& operator=(const WfsAck&);
  WfsAck() noexcept;

  virtual ~WfsAck() noexcept;
  bool ok;
  WfsError error;

  _WfsAck__isset __isset;

  void __set_ok(const bool val);

  void __set_error(const WfsError& val);

  bool operator == (const WfsAck & rhs) const;
  bool operator != (const WfsAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsAck &a, WfsAck &b);

std::ostream& operator<<(std::ostream& out, const WfsAck& obj);

typedef struct _WfsReq__isset {
  _WfsReq__isset() : path(false) {}
  bool path :1;
} _WfsReq__isset;

class WfsReq : public virtual ::apache::thrift::TBase {
 public:

  WfsReq(const WfsReq&);
  WfsReq& operator=(const WfsReq&);
  WfsReq() noexcept;

  virtual ~WfsReq() noexcept;
  std::string path;

  _WfsReq__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const WfsReq & rhs) const;
  bool operator != (const WfsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsReq &a, WfsReq &b);

std::ostream& operator<<(std::ostream& out, const WfsReq& obj);

typedef struct _WfsAuth__isset {
  _WfsAuth__isset() : name(false), pwd(false) {}
  bool name :1;
  bool pwd :1;
} _WfsAuth__isset;

class WfsAuth : public virtual ::apache::thrift::TBase {
 public:

  WfsAuth(const WfsAuth&);
  WfsAuth& operator=(const WfsAuth&);
  WfsAuth() noexcept;

  virtual ~WfsAuth() noexcept;
  std::string name;
  std::string pwd;

  _WfsAuth__isset __isset;

  void __set_name(const std::string& val);

  void __set_pwd(const std::string& val);

  bool operator == (const WfsAuth & rhs) const;
  bool operator != (const WfsAuth &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsAuth & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsAuth &a, WfsAuth &b);

std::ostream& operator<<(std::ostream& out, const WfsAuth& obj);

typedef struct _WfsData__isset {
  _WfsData__isset() : data(false) {}
  bool data :1;
} _WfsData__isset;

class WfsData : public virtual ::apache::thrift::TBase {
 public:

  WfsData(const WfsData&);
  WfsData& operator=(const WfsData&);
  WfsData() noexcept;

  virtual ~WfsData() noexcept;
  std::string data;

  _WfsData__isset __isset;

  void __set_data(const std::string& val);

  bool operator == (const WfsData & rhs) const;
  bool operator != (const WfsData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsData &a, WfsData &b);

std::ostream& operator<<(std::ostream& out, const WfsData& obj);

typedef struct _WfsFile__isset {
  _WfsFile__isset() : compress(false) {}
  bool compress :1;
} _WfsFile__isset;

class WfsFile : public virtual ::apache::thrift::TBase {
 public:

  WfsFile(const WfsFile&);
  WfsFile& operator=(const WfsFile&);
  WfsFile() noexcept;

  virtual ~WfsFile() noexcept;
  std::string data;
  std::string name;
  int8_t compress;

  _WfsFile__isset __isset;

  void __set_data(const std::string& val);

  void __set_name(const std::string& val);

  void __set_compress(const int8_t val);

  bool operator == (const WfsFile & rhs) const;
  bool operator != (const WfsFile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WfsFile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(WfsFile &a, WfsFile &b);

std::ostream& operator<<(std::ostream& out, const WfsFile& obj);



#endif
